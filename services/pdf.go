package services

import (
	"fmt"
	
	"time"

	"github.com/jung-kurt/gofpdf"
	"vigovia-itinerary/models"
)

// GeneratePDF creates a travel itinerary PDF that matches the frontend design exactly
func GeneratePDF(itinerary *models.Itinerary, filePath string) error {
	// Create new PDF document (Portrait, mm, A4)
	pdf := gofpdf.New("P", "mm", "A4", "")
	pdf.AddPage()

	// Add Vigovia branding header
	pdf.SetFont("Arial", "B", 32)
	pdf.SetTextColor(147, 51, 234) // Purple color
	pdf.CellFormat(0, 15, "vigovia", "", 0, "C", false, 0, "")
	pdf.SetFont("Arial", "", 14)
	pdf.SetTextColor(107, 114, 128)
	pdf.CellFormat(0, 15, "PLAN.PACK.GO", "", 1, "C", false, 0, "")
	pdf.Ln(10)

	// Add title
	pdf.SetFont("Arial", "B", 28)
	pdf.SetTextColor(31, 41, 55)
	pdf.CellFormat(0, 20, "Travel Itinerary", "", 1, "C", false, 0, "")
	pdf.Ln(10)

	// Parse dates for better formatting
	startDate, _ := time.Parse("2006-01-02", itinerary.StartDate)
	endDate, _ := time.Parse("2006-01-02", itinerary.EndDate)

	// Calculate trip duration
	duration := endDate.Sub(startDate)
	days := int(duration.Hours()/24) + 1

	// Add personalized greeting
	pdf.SetFont("Arial", "B", 22)
	pdf.SetTextColor(147, 51, 234)
	pdf.CellFormat(0, 15, fmt.Sprintf("Hi, %s!", itinerary.Name), "", 1, "L", false, 0, "")
	pdf.Ln(5)

	// Add destination header
	pdf.SetFont("Arial", "B", 26)
	pdf.SetTextColor(31, 41, 55)
	pdf.CellFormat(0, 15, fmt.Sprintf("%s Adventure", itinerary.Destination), "", 1, "L", false, 0, "")
	pdf.Ln(15)

	// Create trip details box with border
	pdf.SetFillColor(248, 250, 252)
	pdf.SetDrawColor(229, 231, 235)
	pdf.SetLineWidth(1)
	pdf.Rect(10, pdf.GetY(), 190, 60, "FD")

	// Trip details content
	y := pdf.GetY() + 15
	pdf.SetFont("Arial", "B", 16)
	pdf.SetTextColor(55, 65, 81)

	// Traveler info
	pdf.SetXY(20, y)
	pdf.CellFormat(50, 10, "Traveler:", "", 0, "L", false, 0, "")
	pdf.SetFont("Arial", "", 16)
	pdf.SetTextColor(0, 0, 0)
	pdf.CellFormat(80, 10, itinerary.Name, "", 1, "L", false, 0, "")

	// Destination info
	y += 15
	pdf.SetFont("Arial", "B", 16)
	pdf.SetTextColor(55, 65, 81)
	pdf.SetXY(20, y)
	pdf.CellFormat(50, 10, "Destination:", "", 0, "L", false, 0, "")
	pdf.SetFont("Arial", "", 16)
	pdf.SetTextColor(0, 0, 0)
	pdf.CellFormat(80, 10, itinerary.Destination, "", 1, "L", false, 0, "")

	// Date range
	y += 15
	pdf.SetFont("Arial", "B", 16)
	pdf.SetTextColor(55, 65, 81)
	pdf.SetXY(20, y)
	pdf.CellFormat(50, 10, "Travel Dates:", "", 0, "L", false, 0, "")
	pdf.SetFont("Arial", "", 16)
	pdf.SetTextColor(0, 0, 0)
	dateRange := fmt.Sprintf("%s to %s", startDate.Format("02 Jan 2006"), endDate.Format("02 Jan 2006"))
	pdf.CellFormat(120, 10, dateRange, "", 1, "L", false, 0, "")

	// Duration
	y += 15
	pdf.SetFont("Arial", "B", 16)
	pdf.SetTextColor(55, 65, 81)
	pdf.SetXY(20, y)
	pdf.CellFormat(50, 10, "Duration:", "", 0, "L", false, 0, "")
	pdf.SetFont("Arial", "", 16)
	pdf.SetTextColor(0, 0, 0)
	pdf.CellFormat(80, 10, fmt.Sprintf("%d Days", days), "", 1, "L", false, 0, "")

	pdf.Ln(30)

	// Add itinerary section
	pdf.SetFont("Arial", "B", 20)
	pdf.SetTextColor(31, 41, 55)
	pdf.CellFormat(0, 12, "Your Itinerary Overview", "", 1, "L", false, 0, "")
	pdf.Ln(10)

	// Add sample itinerary days (limit to 7 days for PDF space)
	maxDays := days
	if maxDays > 7 {
		maxDays = 7
	}

	for i := 0; i < maxDays; i++ {
		currentDate := startDate.AddDate(0, 0, i)
		
		// Day header with colored background
		pdf.SetFillColor(147, 51, 234)
		pdf.SetTextColor(255, 255, 255)
		pdf.SetFont("Arial", "B", 16)
		pdf.CellFormat(0, 12, fmt.Sprintf("Day %d - %s", i+1, currentDate.Format("Monday, 02 Jan")), "", 1, "L", true, 0, "")
		
		// Sample activities
		pdf.SetFont("Arial", "", 14)
		pdf.SetTextColor(75, 85, 99)
		pdf.SetFillColor(255, 255, 255)
		
		activities := getSampleActivities(itinerary.Destination, i)
		for _, activity := range activities {
			pdf.CellFormat(10, 8, "â€¢", "", 0, "L", false, 0, "")
			pdf.CellFormat(0, 8, activity, "", 1, "L", false, 0, "")
		}
		pdf.Ln(8)
	}

	// Add footer section
	pdf.Ln(20)
	pdf.SetFont("Arial", "B", 18)
	pdf.SetTextColor(147, 51, 234)
	pdf.CellFormat(0, 12, "PLAN.PACK.GO!", "", 1, "C", false, 0, "")
	pdf.Ln(10)

	// Add generation info
	pdf.SetFont("Arial", "I", 12)
	pdf.SetTextColor(107, 114, 128)
	pdf.CellFormat(0, 8, "Generated by Vigovia Travel Technologies", "", 1, "C", false, 0, "")
	pdf.CellFormat(0, 8, fmt.Sprintf("Created on: %s", time.Now().Format("02 Jan 2006, 15:04 MST")), "", 1, "C", false, 0, "")

	// Save PDF to file
	return pdf.OutputFileAndClose(filePath)
}

// DayActivity represents activities for a single day
type DayActivity struct {
	Morning   string
	Afternoon string
	Evening   string
}

// getSampleActivitiesDetailed returns detailed day-by-day activities
func getSampleActivitiesDetailed(destination string) []DayActivity {
	activities := map[string][]DayActivity{
		"Singapore": {
			{"Arrive at Changi Airport", "Check into hotel, Marina Bay Sands visit", "Gardens by the Bay exploration"},
			{"Breakfast at hotel", "Chinatown and Little India tour", "Singapore Flyer and Merlion Park"},
			{"Morning city tour", "Sentosa Island adventure", "Universal Studios Singapore"},
			{"Relaxed breakfast", "Shopping at Orchard Road", "Clarke Quay nightlife"},
			{"Hotel checkout", "Last-minute shopping", "Departure to airport"},
		},
		"Dubai": {
			{"Arrive in Dubai", "Burj Khalifa and Dubai Mall", "Dubai Fountain show"},
			{"Desert Safari preparation", "Dune bashing adventure", "Bedouin camp dinner"},
			{"Dubai Marina walk", "JBR Beach activities", "Atlantis Palm visit"},
			{"Gold and Spice Souk", "Dubai Creek cruise", "Traditional dinner"},
			{"Hotel checkout", "Duty-free shopping", "Departure from DXB"},
		},
		"Bali": {
			{"Arrive in Bali", "Transfer to Ubud", "Rice terraces visit"},
			{"Sacred Monkey Forest", "Traditional art villages", "Ubud Palace tour"},
			{"Tanah Lot Temple", "Sunset photography", "Seafood dinner"},
			{"Water sports at Tanjung Benoa", "Beach relaxation", "Spa treatment"},
			{"Hotel checkout", "Souvenir shopping", "Departure from Ngurah Rai"},
		},
		"Thailand": {
			{"Arrive in Bangkok and hotel check-in", "Visit Grand Palace and Wat Pho Temple", "Floating market tour and Thai cooking class"},
			{"Explore Chatuchak Weekend Market", "Visit Wat Arun and Chao Phraya River cruise", "Thai massage and spa relaxation"},
			{"Departure from Suvarnabhumi Airport", "", ""},
			{"", "", ""},
			{"", "", ""},
			{"", "", ""},
			{"", "", ""},
		},
	}

	if destActivities, exists := activities[destination]; exists {
		return destActivities
	}

	// Default activities
	return []DayActivity{
		{"Arrival and check-in", "City orientation tour", "Welcome dinner"},
		{"Morning sightseeing", "Cultural attractions", "Local cuisine experience"},
		{"Adventure activities", "Shopping and markets", "Entertainment show"},
		{"Relaxation time", "Optional excursions", "Farewell dinner"},
		{"Check-out", "Last-minute shopping", "Departure"},
		{"", "", ""},
		{"", "", ""},
	}
}

// FlightInfo represents flight information
type FlightInfo struct {
	Date    string
	Airline string
	Route   string
}

// getSampleFlights returns sample flight information
func getSampleFlights(destination string, startDate, endDate time.Time) []FlightInfo {
	return []FlightInfo{
		{
			Date:    startDate.Format("Mon 02 Jan'06"),
			Airline: "Air India",
			Route:   fmt.Sprintf("From Delhi (DEL) To %s", getAirportCode(destination)),
		},
		{
			Date:    endDate.Format("Mon 02 Jan'06"),
			Airline: "Air India",
			Route:   fmt.Sprintf("From %s To Delhi (DEL)", getAirportCode(destination)),
		},
	}
}

// getAirportCode returns airport code for destination
func getAirportCode(destination string) string {
	codes := map[string]string{
		"Singapore": "Singapore (SIN)",
		"Dubai":     "Dubai (DXB)",
		"Bali":      "Bali (DPS)",
		"Thailand":  "Bangkok (BKK)",
	}
	
	if code, exists := codes[destination]; exists {
		return code
	}
	return fmt.Sprintf("%s (XXX)", destination)
}

// getSampleActivities returns destination-specific sample activities
func getSampleActivities(destination string, day int) []string {
	// Destination-specific activity templates
	activities := map[string][]string{
		"Singapore": {
			"Arrive at Changi Airport and check into hotel",
			"Visit Marina Bay Sands and Gardens by the Bay",
			"Explore Chinatown and Little India districts",
			"Take Singapore Flyer and visit Merlion Park",
			"Shopping at Orchard Road and local markets",
			"Visit Sentosa Island and Universal Studios",
			"Departure and airport transfer",
		},
		"Dubai": {
			"Arrive in Dubai and luxury hotel check-in",
			"Visit Burj Khalifa and Dubai Mall shopping",
			"Desert Safari with traditional Bedouin dinner",
			"Explore Dubai Marina and JBR Beach",
			"Visit Gold Souk and Spice Souk markets",
			"Palm Jumeirah and Atlantis resort visit",
			"Departure from Dubai International Airport",
		},
		"Bali": {
			"Arrive in Bali and transfer to Ubud",
			"Visit Tegallalang Rice Terraces and Sacred Monkey Forest",
			"Explore Tanah Lot Temple at sunset",
			"Water sports and beach activities at Tanjung Benoa",
			"Visit Uluwatu Temple and traditional Kecak Dance",
			"Shopping at Seminyak and beach relaxation",
			"Departure from Ngurah Rai International Airport",
		},
		"Thailand": {
			"Arrive in Bangkok and hotel check-in",
			"Visit Grand Palace and Wat Pho Temple",
			"Floating market tour and Thai cooking class",
			"Explore Chatuchak Weekend Market",
			"Visit Wat Arun and Chao Phraya River cruise",
			"Thai massage and spa relaxation",
			"Departure from Suvarnabhumi Airport",
		},
	}

	// Get destination-specific activities or use default
	if destActivities, exists := activities[destination]; exists && day < len(destActivities) {
		return []string{destActivities[day]}
	}

	// Default activities for unknown destinations
	defaultActivities := []string{
		"Arrival and hotel check-in",
		"City tour and local sightseeing",
		"Cultural attractions and museums",
		"Adventure activities and local experiences",
		"Shopping and local markets exploration",
		"Relaxation and leisure activities",
		"Departure and airport transfer",
	}

	if day < len(defaultActivities) {
		return []string{defaultActivities[day]}
	}

	return []string{"Free time for personal exploration"}
}
